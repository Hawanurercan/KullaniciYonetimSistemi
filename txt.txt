""" Özellikler
Kullanıcı kaydı ve giriş yapma.
Kullanıcı verilerini listeleme.
Kullanıcı güncelleme ve silme işlemleri.
JWT ile güvenli kimlik doğrulama."""

"""ekleme şifre sıfırlama"""

""" models.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
"""

"""config.py

class Config:
    SECRET_KEY = "supersecretkey"
    SQLALCHEMY_DATABASE_URI = "sqlite:///users.db"
    SQLALCHEMY_TRACK_MODIFICATIONS = False
"""

"""app.py

from flask import Flask
from models import db
from routes import user_routes
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

db.init_app(app)

# Rotaları kaydet
app.register_blueprint(user_routes)

# Veritabanını başlat
with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)
"""

"""routes.py

from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
from models import db, User

user_routes = Blueprint('user_routes', __name__)

# JWT
jwt = JWTManager()

# Kullanıcı Kaydı
@user_routes.route('/register', methods=['POST'])
def register():
    data = request.json
    hashed_password = generate_password_hash(data['password'], method='sha256')
    new_user = User(username=data['username'], email=data['email'], password=hashed_password)

    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "Kullanıcı başarıyla oluşturuldu!"}), 201

# Kullanıcı Girişi
@user_routes.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(email=data['email']).first()

    if not user or not check_password_hash(user.password, data['password']):
        return jsonify({"message": "Geçersiz kullanıcı adı veya şifre"}), 401

    token = create_access_token(identity={"username": user.username, "email": user.email})
    return jsonify({"token": token})

# Kullanıcı Listeleme
@user_routes.route('/users', methods=['GET'])
@jwt_required()
def get_users():
    users = User.query.all()
    return jsonify([{"id": user.id, "username": user.username, "email": user.email} for user in users])

# Kullanıcı Güncelleme
@user_routes.route('/users/<int:id>', methods=['PUT'])
@jwt_required()
def update_user(id):
    data = request.json
    user = User.query.get(id)

    if not user:
        return jsonify({"message": "Kullanıcı bulunamadı!"}), 404

    user.username = data.get('username', user.username)
    user.email = data.get('email', user.email)

    db.session.commit()
    return jsonify({"message": "Kullanıcı başarıyla güncellendi!"})

# Kullanıcı Silme
@user_routes.route('/users/<int:id>', methods=['DELETE'])
@jwt_required()
def delete_user(id):
    user = User.query.get(id)

    if not user:
        return jsonify({"message": "Kullanıcı bulunamadı!"}), 404

    db.session.delete(user)
    db.session.commit()
    return jsonify({"message": "Kullanıcı başarıyla silindi!"})
"""

"""test api 
{
  "username": "Ahmet",
  "email": "ahmet@example.com",
  "password": "12345"
}

"""Giriş yapma:
Endpoint: POST /login
JSON Gövde:

json
Kodu kopyala
{
  "email": "ahmet@example.com",
  "password": "12345"
}
Kullanıcı listeleme (JWT token ile):
Endpoint: GET /users
Authorization: Bearer <token>
"""

"""şifre sıfırlama ekleme
kullanıcı rolleri yönetimi admin normal

"""python app.py"""
